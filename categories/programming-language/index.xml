<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming Language on Coding Automaton</title>
    <link>http://jessezhuang.github.io/categories/programming-language/</link>
    <description>Recent content in Programming Language on Coding Automaton</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 19 Jun 2016 01:20:46 -0700</lastBuildDate>
    
	<atom:link href="http://jessezhuang.github.io/categories/programming-language/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using Java&#39;s Reflection for Testing</title>
      <link>http://jessezhuang.github.io/article/java-reflection-test/</link>
      <pubDate>Sun, 19 Jun 2016 01:20:46 -0700</pubDate>
      
      <guid>http://jessezhuang.github.io/article/java-reflection-test/</guid>
      <description>Writing Boilerplate Test Code is Boring Repeatedly writing boilerplate for loops for testing is not fun. We can use Java reflection API (java.lang.reflect package) to maximize code reuse and help testing.
Frameworks like JUnit uses reflection for testing. I will introduce a single method today on how reflection can be used for testing.
The code examples below are available at my github repository.
Get an Instance of Class Being Tested First we will declare a message to print out if all tests passed.</description>
    </item>
    
  </channel>
</rss>
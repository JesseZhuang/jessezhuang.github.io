<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mongodb on Coding Automaton</title>
    <link>http://jessezhuang.github.io/tags/mongodb/</link>
    <description>Recent content in Mongodb on Coding Automaton</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 29 Jun 2016 00:00:00 -0700</lastBuildDate>
    
	<atom:link href="http://jessezhuang.github.io/tags/mongodb/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mongodb Tutorial 6 - Application Engineering</title>
      <link>http://jessezhuang.github.io/article/mongodb-app-engineer/</link>
      <pubDate>Wed, 29 Jun 2016 00:00:00 -0700</pubDate>
      
      <guid>http://jessezhuang.github.io/article/mongodb-app-engineer/</guid>
      <description>Durability of Writes Write Concern How to make sure the writes persistent? Assume application talking to a database server in the scheme below.
The settings of two parameters affect the write concern:
   w(wait for acknowledgement) j(journal) effect comment     1 false fast, small window of vulnerability default setting   1 true slow, no vulnerability can be done inside driver at collection, database, or client level   0 - unacknowledged write do not recommend   2 - wait for 2 nodes in replica set to acknowledge write w can be 0-3 for a set with 3 nodes   majority - wait for majority to acknowledge, avoid rollback on failover -   tag values - set tags on nodes -    If the journal has been written to disk and the server crashes, on recovery the server can look in the journal and recreate all the writes that were not yet persisted to the pages.</description>
    </item>
    
    <item>
      <title>Mongodb Tutorial 1 - Introduction</title>
      <link>http://jessezhuang.github.io/article/mongodb-intro/</link>
      <pubDate>Sun, 26 Jun 2016 19:27:36 -0700</pubDate>
      
      <guid>http://jessezhuang.github.io/article/mongodb-intro/</guid>
      <description>To run mongo commands from the source of a JavaScript file,
cat source.js | mongo # or mongo &amp;lt; source.js # or just mongo source.js  To import/export data,
$ mongoimport -d &amp;lt;database&amp;gt; -c &amp;lt;collection&amp;gt; -f &amp;lt;file&amp;gt; $ mongoimport -d &amp;lt;dababase&amp;gt; -c &amp;lt;collection&amp;gt; &amp;lt; file.json $ mongoexport -d &amp;lt;dababase&amp;gt; -c &amp;lt;collection&amp;gt; --out file.json $ mongorestore -d &amp;lt;database&amp;gt; -c &amp;lt;collection&amp;gt; file.bson # by default writes BSON file to dump/ in current directory $ mongodump -d &amp;lt;database&amp;gt; -c &amp;lt;collection [--out &amp;lt;path&amp;gt;]  What is MongoDB?</description>
    </item>
    
    <item>
      <title>MongoDB Tutorial 5 - Aggregation Framework</title>
      <link>http://jessezhuang.github.io/article/mongodb-aggregation-framework/</link>
      <pubDate>Sun, 26 Jun 2016 14:55:57 -0700</pubDate>
      
      <guid>http://jessezhuang.github.io/article/mongodb-aggregation-framework/</guid>
      <description>The aggregation framework has its roots in SQL&amp;rsquo;s world of groupby clause.
Introduction Example used: imagine a SQL table of products.
   name category manufacture price     ipad tablet Apple 499   nexus s cellphone Samsung 350    To get number of products from each manufacture with SQL,
select manufacture, count(*) from products group by manufacture;  with mongodb,
&amp;gt; use agg &amp;gt; db.</description>
    </item>
    
    <item>
      <title>MongoDB Tutorial 4 - Performance</title>
      <link>http://jessezhuang.github.io/article/mongodb-performance/</link>
      <pubDate>Fri, 24 Jun 2016 14:55:57 -0700</pubDate>
      
      <guid>http://jessezhuang.github.io/article/mongodb-performance/</guid>
      <description>Storage engine Storage engine sits between mongodb server and the file storage. Use db.serverStatus().storageEngine; to check.
WiredTiger for many applications, this is faster - document level concurrency, lock free implementation. optimistic concurrency model which assumes two writes not gonna be on same document. if on same, one write unwound and try again. - compression of data and indexes. WiredTiger manages memory. - append only, no in place updates
MMAP V1 Uses mmap system call undercovers.</description>
    </item>
    
  </channel>
</rss>